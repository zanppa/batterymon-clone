#!/usr/bin/python2
# -*- coding: utf-8 -*-
# vi:ts=4 sw=4 et

import gtk
import glib
from optparse import OptionParser
from collections import namedtuple
import os
import sys
import logging
import gettext

#from preferences import prefs
#from settings import config

# Global preferences
# TODO: move to one of the above files?
use_charge = False		# Force usage of charge instead of energy
use_capacity = False	# Force usage of capacity instead of calculations
use_present = True		# Use the /present to check if the battery is present or not
total_batt = True		# Show combined (total) battery
all_batts = False		# Show all individual batteries
theme = None

_ = lambda msg: gettext.dgettext('batterymon', msg)
logger = logging.getLogger("batterymon")


# Desktop notifications init
try:
    import pynotify
    if not pynotify.init("Battery Monitor"):
        print(_("There was an error initializing the notification system. Notifications won't work."))
        pynotify = None
except:
    print(_("You do not seem to have python-notify installed. Notifications won't work."))
    pynotify = None


VERSION="1.4.3"
AUTHORS=["Matthew Horsell", "Tomas Kramar", "sayamindu", "Denilson SÃ¡", "Jarek Sedlacek"]



def cat(dirname, filename=None):
    '''Works somewhat like the command-line "cat".
    You pass a filename, and it returns the file contents.
    You can also pass two strings and they will be joined using os.path.join().
    The returned string is automatically stripped using .strip().

    If the file is not found (or in case of IOError), just return an empty
    string.

    >>> cat('/file_not_found_or_IOError')
    ''
    >>> # These 3 function calls behave exactly the same way:
    >>> cat('/proc/version')  # doctest:+ELLIPSIS
    ...
    >>> cat('/proc', 'version')  # doctest:+ELLIPSIS
    ...
    >>> cat('/proc/', 'version')  # doctest:+ELLIPSIS
    ...

    '''

    fullfilename = dirname if filename is None else os.path.join(dirname, filename)
    try:
        with open(fullfilename) as f:
            return f.read().strip()
    except IOError as e:
        return ''


def int_or_zero(s):
    '''Receives a string and converts to int.
    Returns zero in case of errors, instead of throwing an exception.

    >>> int_or_zero('')
    0
    >>> int_or_zero('42')
    42
    '''

    try:
        return int(s)
    except ValueError as e:
        return 0


def detect_AcAdapters_and_Batteries(blacklist=None, whitelist=None):
    '''Detects both AC Adapters and Batteries, using the "new"
    /sys/class/power_supply/* interface.

    Returns 2 lists, one of AcAdapter objects, and another of Battery objects.
    '''

    ac_adapters = []
    batteries = []

    basepath = '/sys/class/power_supply'
    for name in os.listdir(basepath):
        if blacklist is not None and name in blacklist:
            logger.debug("Battery %s in blacklist" % name)
            continue
        if whitelist is not None and name not in whitelist:
            logger.debug("Battery %s not in whitelist" % name)
            continue

        # dirname is '/sys/class/power_supply/BAT0'
        dirname = os.path.join(basepath, name)

        try:
            devtype = cat(dirname, 'type')

            if devtype == 'Mains':
                ac_adapters.append(AcAdapter(dirname))
            elif devtype == 'Battery':
                batteries.append(Battery(name, dirname))
            else:
                logger.debug('Unknown type "{0}" for {1}'.format(devtype, dirname))
        except IOError as e:
            # I'm not using logger.exception() because this is not an error.
            logger.debug('Exception while detecting "{0}": {1}'.format(dirname, e))

    n_adapters = len(ac_adapters)
    n_batteries = len(batteries)
    logger.debug('Found {0} AC adapter{1} and {2} batter{3}'.format(n_adapters, '' if n_adapters == 1 else 's', n_batteries, 'y' if n_adapters == 1 else 'ies'))

    return ac_adapters, batteries


class AcAdapter:
    def __init__(self, dirname):
        self._dirname = dirname

    def update(self):
        # Possible values: 0, 1
        present = (cat(self._dirname, 'online') == '1')
        logger.debug("Adapter is present: %s" % present)
        return present

    def __eq__(self, _object):
        if isinstance(_object, AcAdapter):
            return self._dirname == _object._dirname
        return False


BatteryInfo = namedtuple('BatteryInfo', 'charge_level remaining_time is_charging is_discharging present')


class Battery:
    def __init__(self, name, dirname):
        global all_batts
        global theme

        self.name = name
        self._dirname = dirname
        self.systray = None

        self.present = 0
        self.status = ''
        self.is_charging = 0
        self.is_discharging = 0
        self.charge_now = 0
        self.charge_full = 0
        self.current_now = 0
        self.charge_level = 0

        # If all batteries should have icon
        if all_batts:
            self.systray = Systray(name, theme)

    def __eq__(self, _object):
        if isinstance(_object, Battery):
            return self._dirname == _object._dirname
        return False

    def update(self):
        # Working with /sys/class/power_supply/ battery interface:
        #
        # /present:
        #   0 or 1
        # /status:
        #   "Unknown", "Charging", "Discharging", "Not charging", "Full"
        #   state, then probably it will be reported as "Unknown".
        #   All other states are pretty self-explanatory.
        #   Similar to "charging state:" from /proc/acpi/battery/BAT0/state
        # /power_now:
        #   Power being supplied to or by the battery, measured in microwatts.
        #   The same as "present rate:" from /proc/acpi/battery/BAT0/state
        # /current_now:
        #   Outdated interface, replaced by power_now.
        # /energy_now:
        #   Remaining energy stored in the battery, measured in microWh.
        #   The same as "remaining capacity:" from /proc/acpi/battery/BAT0/state
        # /energy_full_design:
        #   Measured in microWh.
        #   The same as "design capacity:" from /proc/acpi/battery/BAT0/info
        # /energy_full:
        #   This is the value that should be used when calculating the capacity.
        #   Measured in microWh.
        #   The same as "last full capacity:" from /proc/acpi/battery/BAT0/info
        #
        # http://lxr.linux.no/linux+*/Documentation/power/power_supply_class.txt
        # http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=7faa144a518c456e2057918f030f50100144ccc6
        # http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=532000

        global use_charge
        global use_capacity
        global use_present

        old_state = (self.present, self.charge_full, self.charge_now, self.current_now)

        self.present = (cat(self._dirname, 'present') == '1')
        logger.debug("battery.present: %s" % str(self.present))

        if self.present or (not use_present): 	# If battery is missing, skip this
            self.present = True
            self.status = cat(self._dirname, 'status')
            if self.status == 'Charging' or self.status == 'Full':	# Seems like full also indicates on AC
                self.is_charging = True
                self.is_discharging = False
            elif self.status == 'Discharging':
                self.is_charging = False
                self.is_discharging = True
            elif self.status == '':		# IOError --> missing battery?
                self.is_charging = False
                self.is_discharging = False
                self.present = False
            else:
                # "Unknown", "Not charging"
                self.is_charging = False
                self.is_discharging = False

            logger.debug("battery.is_charging: %s" % str(self.is_charging))
            logger.debug("battery.is_discharging: %s" % str(self.is_discharging))

            # "(charge|energy)_full" should be preferred over
            # "(energy|charge)_full_design"

            # naming convention 1: charge_full, charge_now, current_now
            # naming convention 2: energy_full, energy_now, power_now
            if not self.present: 	# Error in this branch
                self.charge_full = 0
                self.charge_now = 0
                self.current_now = 0
            elif use_capacity: # Use capacity only if specially requested
                self.charge_full = 100
                self.charge_now = int_or_zero(cat(self._dirname, 'capacity'))
                self.current_now = 0
            elif not use_charge: # By default use energy
                self.charge_full = int_or_zero(cat(self._dirname, 'energy_full'))
                self.charge_now = int_or_zero(cat(self._dirname, 'energy_now'))
                self.current_now = int_or_zero(cat(self._dirname, 'power_now'))

            # Use charge as last option
            if self.present and (not use_capacity) and (use_charge or not (self.charge_full and self.charge_now)):
                self.charge_full = int_or_zero(cat(self._dirname, 'charge_full'))
                self.charge_now = int_or_zero(cat(self._dirname, 'charge_now'))
                self.current_now = int_or_zero(cat(self._dirname, 'current_now'))

            # If didn't get some variables, put all as zero
            if not (self.charge_full and self.charge_now):
                self.charge_full = 0
                self.charge_now = 0
                self.current_now = 0

            if self.charge_full > 0:
                self.charge_level = 100 * self.charge_now // self.charge_full
            else:
                self.charge_level = 0

            new_state = (self.present, self.charge_full, self.charge_now, self.current_now)

        else:
            new_state = (0, 0, 0, 0)

        if self.systray and new_state != old_state:
            # TODO: Needs remaining time
            self.systray.battery_property_modified(BatteryInfo(self.charge_level, 0, self.is_charging, self.is_discharging, self.present))

        return new_state


class Theme:
    local_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'icons')
    system_path = '/usr/share/batterymon/icons'

    def __init__(self, theme):
        self.theme = theme
        self.iconpath = self.__resolve_iconpath()

        if not self.validate(theme):
            logger.error("Theme %s does not exists, falling back to default" % theme)
            self.theme = "default"

            if not self.validate("default"):
                logger.critical("Default theme does not exists, fatal")
                exit()

        logger.debug("Theme %s validated" % self.theme)

    def __resolve_iconpath(self):
        for path in [self.local_path, self.system_path]:
            themedir = os.path.join(path, self.theme)
            if os.path.isdir(themedir):
                logger.debug('Using %s' % (themedir,))
                return themedir

    @classmethod
    def list_all_themes(cls):
        print "Themes:"
        temp = []
        for path in [cls.local_path, cls.system_path]:
            try:
                temp.extend(os.listdir(path))
            except OSError:
                pass
        temp.sort()
        print str(temp)

    def get_icon(self, name):
        return os.path.join(self.iconpath, "battery_%s.png" % (name,))

    def file_exists(self, f):
        try:
            open(f)
        except IOError:
            return False
        else:
            return True

    def validate(self, theme):
        all_icons = ["1", "2", "3", "4", "5", "empty", "full",
        "charging_1","charging_2","charging_3","charging_4","charging_5",
        "charging_full","charging_empty"]

        for icon in all_icons:
            if not self.file_exists(self.get_icon(icon)):
                logger.debug("Could not find icon %s" % self.get_icon(icon))
                return False

        return True


class PowerEventListener:
    def ac_property_modified(self, present):
        pass

    def battery_property_modified(self, battery_info):
        pass


class Systray(PowerEventListener):
    def __init__(self, name, theme):
        self.name = name
        self.theme = theme
        self.tray_object= gtk.StatusIcon()
        self.tray_object.set_visible(False)
        #self.set_icon("full")
        self.tray_object.set_blinking(False)
        self.tray_object.connect("popup_menu", self.rightclick_menu)

        self.show_trayicon(1) ## fixed to one for now

    def show_trayicon(self,value):
       setting = value
       ### only changing on startup

       if setting == 3 : ## only show if charing or discharging
            self.tray_object.set_visible(False)
            return

       if setting == 1: ### always show an icon
                self.tray_object.set_visible(True)
                return

       if setting == 2: ## only show when discharging
            self.tray_object.set_visible(True)

            return

    def read_settings(self):
       settings=config()
       result = settings.read_settings_int("show_icon")

       return result

    def battery_property_modified(self, battery):
        # Setting the tooltip
        if not battery.present:
            if battery.is_charging:
                self.tray_object.set_tooltip("On AC - No batteries present")
                logger.debug('On AC - No batteries present')
            else:
                self.tray_object.set_tooltip("No batteries present")
                logger.debug('No batteries present')

        elif battery.is_charging:
            self.tray_object.set_tooltip(
                _("Charging\nBattery Level: {battery.charge_level}%\nTime remaining: {battery.remaining_time}").format(battery=battery)
                #_("On AC (Charging)\nBattery Level: {charge_level}%\nTime remaining: {remaining_time}").format(battery=battery)
            )
            logger.debug('Charging - charge_level={battery.charge_level}'.format(battery=battery))

        elif battery.is_discharging:
            self.tray_object.set_tooltip(
                _("Battery Level: {battery.charge_level}%\nTime remaining: {battery.remaining_time}").format(battery=battery)
            )
            logger.debug('Discharging - charge_level={battery.charge_level} - time={battery.remaining_time}'.format(battery=battery))

        else:
            self.tray_object.set_tooltip(
                _("Battery Level: {battery.charge_level}%").format(battery=battery)
            )
            logger.debug('Charge_level={battery.charge_level}'.format(battery=battery))

        # Some helper variables
        levels_and_icons = [
            (96, 'full'),
            (80, '5'),
            (64, '4'),
            (48, '3'),
            (32, '2'),
            (16, '1'),
            ( 0, 'empty'),
        ]

        # Setting the icon image
        for level, icon_name in levels_and_icons:
            if level > battery.charge_level:
                continue
            else:
                # Found the most appropriate icon!
                if battery.is_charging:
                    icon_name = 'charging_' + icon_name
                self.set_icon(icon_name)

                # Idea: use low_level and critical_level to decide if the icon should blink
                #self.tray_object.set_blinking(False)

                # Let's stop this for loop
                break
        else:
            # No icon found. This shouldn't happen.
            logger.debug('No icon found for charge_level="{0}", this should not have happened.'.format(battery.charge_level))

    def rightclick_menu(self, button, widget, event):
        menu = gtk.Menu()
        about_menu = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
        about_menu.connect('activate', self.about)
        exit_menu = gtk.ImageMenuItem(gtk.STOCK_CLOSE)
        exit_menu.connect('activate', self.close)
        pref_menu = gtk.ImageMenuItem(gtk.STOCK_PREFERENCES)
        pref_menu.connect('activate',self.preferences)
        menu.append(about_menu)
        #menu.append(pref_menu)
        menu.append(exit_menu)
        menu.show_all()
        menu.popup(None, None, None, 2, event)

    def preferences(self,button):
        show_prefs = prefs()

    def close(self,button):
        sys.exit(0)

    def about(self, button):
        about_dg = gtk.AboutDialog()
        about_dg.set_name(_("Battery Monitor"))
        about_dg.set_version(VERSION)
        about_dg.set_authors(AUTHORS)
        about_dg.connect("response", lambda d, r: d.destroy())
        about_dg.show()

    def set_icon(self,name):
        self.tray_object.set_from_file(self.theme.get_icon(name))
        self.Icon_name = name
        logger.debug("Icon Name: %s" % name)


class NotificationHelper:
    def __init__(self, theme):
        self.theme = theme

    def notify(self, title, message, icon):
        if pynotify:
            n = pynotify.Notification(title, message)
            iconf = self.theme.get_icon(icon)
            logger.debug("DEBUG Notification icon " +iconf)
            icon = gtk.gdk.pixbuf_new_from_file_at_size(iconf, 46, 46)
            n.set_icon_from_pixbuf(icon)
            n.show()
            logger.debug("Notification shown")


def parse_args():
    parser = OptionParser(usage='usage: %prog [options] ', version=VERSION, description="Simple Battery Monitor")
    parser.add_option("-n", "--notify-at"  , action="store", help="notify me when battery level is lower than the provided value", dest="notification_level", default="10")
    parser.add_option("-c", "--critical"   , action="store", help="set critical level", dest="critical_level", default="5")
    parser.add_option("-e", "--on-critical", action="store", help="run this command on critical power level", dest="critical_command", default=None)
    parser.add_option("-i", "--interval"   , action="store", help="polling interval (in seconds)" , dest="polling_interval", default="10")
    parser.add_option("-t", "--theme"      , action="store", help="set icon theme", dest="theme", default="default")
    parser.add_option("-l", "--list-themes", action="store_true", help="list all avalable themes", dest="list_themes", default=False)
    parser.add_option("-d", "--debug"      , action="store_true", help="run in debug mode", dest="debug", default=False)
    parser.add_option("-w", "--whitelist"  , action="append", help="whitelist (allow) a device", dest="whitelist")
    parser.add_option("-b", "--blacklist"  , action="append", help="blacklist (block) a device", dest="blacklist")
    parser.add_option("--use-charge"  , action="store_true", help="force usage of charge instead of energy", dest="use_charge", default=False)
    parser.add_option("--use-capacity"  , action="store_true", help="force usage of reported capacity", dest="use_capacity", default=False)
    parser.add_option("--no-present"  , action="store_false", help="do not check battery presence", dest="use_present", default=True)
    parser.add_option("--no-total"  , action="store_false", help="do not show icon for total battery charge", dest="total_batt", default=True)
    parser.add_option("--show-all"  , action="store_true", help="show individual icons for all batteries", dest="all_batts", default=False)
    (options, args) = parser.parse_args()

    # Check errors
    if options.use_charge and options.use_capacity:
        parser.error("Use either charge or capacity, not both")

    return options


class PowerManager:
    def __init__(self, blacklist=None, whitelist=None):
        self.listeners = []
        self.adapters = self.batteries = []

        # True = on line; False = off-line
        self._ac_old_state = False

        self.blacklist = blacklist
        self.whitelist = whitelist

        self.detect_ac_and_batt()

    def detect_ac_and_batt(self):
        global total_batt
        global all_batts
        global theme

        new_adapters = []
        new_batteries = []
        adapters, batteries = detect_AcAdapters_and_Batteries(self.blacklist, self.whitelist)

        for adapter in adapters:
            if adapter in self.adapters:
                for old_adapter in self.adapters:
                    if adapter == old_adapter:
                        new_adapters.append(old_adapter)
                        break
            else:
                new_adapters.append(adapter)

        for battery in batteries:
            if battery in self.batteries:
                for old_battery in self.batteries:
                    if battery == old_battery:
                        new_batteries.append(old_battery)
                        break
            else:
                new_batteries.append(battery)

        self.adapters = new_adapters
        self.batteries = new_batteries

    def __ac_property_modified_handler(self, present):
        for listener in self.listeners:
            listener.ac_property_modified(present)

    def __battery_property_modified_handler(self, battery):
        for listener in self.listeners:
            listener.battery_property_modified(battery)

    def __str_time(self, seconds):
        if seconds <= 0:
            return 'Unknown'

        minutes = seconds // 60
        hours = minutes // 60

        minutes = minutes % 60

        #FIXME: The strings below need to be i18n-ized properly
        if hours == 0 and minutes == 0:
            return "Less than a minute"
        else:
            return self.__format_time(hours, "Hour", "Hours") + " " + self.__format_time(minutes, "Minute", "Minutes")

    def __format_time(self, time, singular, plural):
        if time == 0:
            return ""
        elif time == 1:
            return "1 %s" % singular
        else:
            return "%s %s" % (time, plural)

    def update(self):
        global all_batts

        # reinitialize ac adapter and battery status in order to detect any
        # new/removed devices
        self.detect_ac_and_batt()

        # Check whether any AC adapters are connected
        state_adapter = False
        state_adapters = []
        for adapter in self.adapters:
            state_adapters.append(adapter.update())
        for state in state_adapters:
            if state and not state_adapter:
                state_adapter = state

        if self._ac_old_state != state_adapter:
            self.__ac_property_modified_handler(state_adapter)
        self._ac_old_state = state_adapter

        # Check battery status
        batteries_present = 0
        state_full = state_now = state_power = 0
        for battery in self.batteries:
            res = battery.update()

            if res[0]: # Battery must be present for this calculation
                batteries_present += 1
                state_full += res[1]
                state_now += res[2]
                state_power += res[3]


        charge_level = 0
        if state_full > 0:
            charge_level = 100 * state_now // state_full
        logger.debug("Total battery.charge_level: %s" % str(charge_level))

        # Negative (total) current/power indicates discharging
        is_discharging = state_power < 0

        # Charging status only if battery/ies is not discharging
        is_charging = ((state_power > 0) or state_adapter) and not is_discharging

        remaining_seconds = -1
        if state_now > 0:
            if not state_power:
                remaining_seconds = 0
            elif is_charging:
                # Note: this is very inaccurate because the charging time is not linear
                remaining_seconds = ((state_full - state_now) * 60 * 60) // abs(state_power)
            else:
                remaining_seconds = (state_now * 60 * 60) // abs(state_power)

        logger.debug("battery.remaining_seconds: %s" % str(remaining_seconds))

        if remaining_seconds:
            remaining_time = self.__str_time(remaining_seconds)
        else:
            remaining_time = "Unable to get power information"

        logger.debug("battery.remaining_time: %s" % str(remaining_time))

        self.__battery_property_modified_handler(BatteryInfo(charge_level, remaining_time, is_charging, is_discharging, batteries_present > 0))

        # Since this is being called on a GTK timer, it needs to return True
        # (if it returns False, the timer stops)
        return True


class Notificator(PowerEventListener):
    def __init__(self, name, theme, low_level=-1, critical_level=-1):
        self.name = name
        self.n = NotificationHelper(theme)
        self.low_level = low_level
        self.notified = False
        self.critical_level = critical_level
        self.critically_notified = False
        logger.debug("self.low_level " + str(self.low_level))

    def ac_property_modified(self, present):
        # TODO: use the appropriate icon, instead of just the "full" versions
        if present:
            self.n.notify(_("On AC"), _("You are currently running on AC"),"charging_full")
        else:
            self.n.notify(_("On Battery"), _("AC adapter unplugged, running on battery"),"full")

    def battery_property_modified(self, battery):
        # Bail out if there is no batteries detected
        if not battery.present:
            return

        # TODO: use the appropriate icon, instead of just the "full" versions
        if battery.charge_level <= self.low_level and not self.notified:
            self.n.notify(_("Low Battery"), _("You have approximately <b>%s</b> remaining") % battery.remaining_time,"empty")
            self.notified = True

        if battery.charge_level <= self.critical_level and not self.critically_notified:
            self.n.notify(_("Critical Battery"), _("You have approximately <b>%s</b> remaining") % battery.remaining_time,"empty")
            self.critically_notified = True


        if battery.is_charging and battery.charge_level > self.critical_level:
            self.critically_notified = False

        if battery.is_charging and battery.charge_level > self.low_level:
            self.notify = False


class CommandRunner(PowerEventListener):
    def __init__(self, name, power_level, command):
        self.name = name
        self.power_level = power_level
        self.command = command

    def battery_property_modified(self, battery):
        if int(battery.charge_level) <= int(self.power_level) and self.command and not battery.is_charging:
            logger.debug("Running command '%s'" % self.command)
            os.system(self.command)


def main():
    global use_charge
    global use_capacity
    global use_present
    global total_batt
    global all_batts
    global theme

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(filename)s[%(lineno)d]: %(levelname)s %(message)s')

    cmdline = parse_args()
    use_charge = cmdline.use_charge
    use_capacity = cmdline.use_capacity
    use_present = cmdline.use_present
    total_batt = cmdline.total_batt
    all_batts = cmdline.all_batts

    if cmdline.list_themes:
        Theme.list_all_themes()
        sys.exit(1)
    if cmdline.debug:
        logger.setLevel(logging.DEBUG)

    theme = Theme(cmdline.theme)

    notificator = Notificator('Total', theme, int(cmdline.notification_level), int(cmdline.critical_level))
    executor = CommandRunner('Total', int(cmdline.critical_level), cmdline.critical_command)

    pm = PowerManager(cmdline.blacklist, cmdline.whitelist)
    pm.listeners.append(notificator)
    pm.listeners.append(executor)

    if total_batt:
        systray = Systray('Total', theme)
        pm.listeners.append(systray)

    pm.update()
    glib.timeout_add_seconds(int(cmdline.polling_interval), pm.update)

    gtk.main()

if __name__ == "__main__":
    main()
